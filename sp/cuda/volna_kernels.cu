//
// auto-generated by op2.py
//

//header
#include "op_lib_cpp.h"
#include "op_cuda_rt_support.h"
#include "op_cuda_reduction.h"

//global constants
#ifndef MAX_CONST_SIZE
#define MAX_CONST_SIZE 128
#endif

#define STRIDE(x,y) x*y
__constant__ int nodes_stride;
__constant__ int edges_stride;
__constant__ int cells_stride;
__constant__ int outputLocation_stride;
__constant__ int bathy_nodes_stride;
__constant__ int liftedCells_stride;
__constant__ float CFL;
__constant__ float EPS;
__constant__ float g;

void op_register_strides() {
  int size;
  size = op_size_of_set("nodes");
  cutilSafeCall(cudaMemcpyToSymbol(nodes_stride, &size, sizeof(int)));
  size = op_size_of_set("edges");
  cutilSafeCall(cudaMemcpyToSymbol(edges_stride, &size, sizeof(int)));
  size = op_size_of_set("cells");
  cutilSafeCall(cudaMemcpyToSymbol(cells_stride, &size, sizeof(int)));
  size = op_size_of_set("outputLocation");
  cutilSafeCall(cudaMemcpyToSymbol(outputLocation_stride, &size, sizeof(int)));
  size = op_size_of_set("bathy_nodes");
  cutilSafeCall(cudaMemcpyToSymbol(bathy_nodes_stride, &size, sizeof(int)));
  size = op_size_of_set("liftedCells");
  cutilSafeCall(cudaMemcpyToSymbol(liftedCells_stride, &size, sizeof(int)));
}

void op_decl_const_char(int dim, char const *type,
int size, char *dat, char const *name){
  if (OP_hybrid_gpu) {
    if (!strcmp(name,"CFL")) {
      cutilSafeCall(cudaMemcpyToSymbol(CFL, dat, dim*size));
    }
    else
    if (!strcmp(name,"EPS")) {
      cutilSafeCall(cudaMemcpyToSymbol(EPS, dat, dim*size));
    }
    else
    if (!strcmp(name,"g")) {
      cutilSafeCall(cudaMemcpyToSymbol(g, dat, dim*size));
    }
    else
    {
      printf("error: unknown const name\n"); exit(1);
    }
  }
}

//user kernel files
#include "EvolveValuesRK2_1_kernel.cu"
#include "EvolveValuesRK2_2_kernel.cu"
#include "simulation_1_kernel.cu"
#include "computeGradient_kernel.cu"
#include "limiter_kernel.cu"
#include "computeFluxes_kernel.cu"
#include "NumericalFluxes_kernel.cu"
#include "SpaceDiscretization_kernel.cu"
#include "incConst_kernel.cu"
#include "initEta_formula_kernel.cu"
#include "initU_formula_kernel.cu"
#include "initV_formula_kernel.cu"
#include "values_operation2_kernel.cu"
#include "applyConst_kernel.cu"
#include "initBathymetry_large_kernel.cu"
#include "initBathyRelative_formula_kernel.cu"
#include "initBathymetry_formula_kernel.cu"
#include "initBathymetry_update_kernel.cu"
#include "initBore_select_kernel.cu"
#include "initGaussianLandslide_kernel.cu"
#include "getTotalVol_kernel.cu"
#include "getMaxElevation_kernel.cu"
#include "getMaxSpeed_kernel.cu"
#include "gatherLocations_kernel.cu"
