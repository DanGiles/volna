//
// auto-generated by op2.m on 21-Oct-2012 11:11:06
//

// user function

#include "NumericalFluxes.h"


// x86 kernel function

void op_x86_NumericalFluxes(
  int    blockIdx,
  float *ind_arg0,
  float *ind_arg1,
  int   *ind_map,
  short *arg_map,
  float *arg6,
  float *arg7,
  float *arg8,
  int   *ind_arg_sizes,
  int   *ind_arg_offs,
  int    block_offset,
  int   *blkmap,
  int   *offset,
  int   *nelems,
  int   *ncolors,
  int   *colors,
  int   set_size) {

  float *arg0_vec[3];
  float *arg1_vec[3];

  int   *ind_arg0_map, ind_arg0_size;
  int   *ind_arg1_map, ind_arg1_size;
  float *ind_arg0_s;
  float *ind_arg1_s;
  int    nelem, offset_b;

  char shared[128000];

  if (0==0) {

    // get sizes and shift pointers and direct-mapped data

    int blockId = blkmap[blockIdx + block_offset];
    nelem    = nelems[blockId];
    offset_b = offset[blockId];

    ind_arg0_size = ind_arg_sizes[0+blockId*2];
    ind_arg1_size = ind_arg_sizes[1+blockId*2];

    ind_arg0_map = &ind_map[0*set_size] + ind_arg_offs[0+blockId*2];
    ind_arg1_map = &ind_map[3*set_size] + ind_arg_offs[1+blockId*2];

    // set shared memory pointers

    int nbytes = 0;
    ind_arg0_s = (float *) &shared[nbytes];
    nbytes    += ROUND_UP(ind_arg0_size*sizeof(float)*1);
    ind_arg1_s = (float *) &shared[nbytes];
  }

  // copy indirect datasets into shared memory or zero increment

  for (int n=0; n<ind_arg0_size; n++)
    for (int d=0; d<1; d++)
      ind_arg0_s[d+n*1] = ind_arg0[d+ind_arg0_map[n]*1];

  for (int n=0; n<ind_arg1_size; n++)
    for (int d=0; d<1; d++)
      ind_arg1_s[d+n*1] = ind_arg1[d+ind_arg1_map[n]*1];


  // process set elements

  for (int n=0; n<nelem; n++) {

    arg0_vec[0] = ind_arg0_s+arg_map[0*set_size+n+offset_b]*1;
    arg0_vec[1] = ind_arg0_s+arg_map[1*set_size+n+offset_b]*1;
    arg0_vec[2] = ind_arg0_s+arg_map[2*set_size+n+offset_b]*1;

    arg1_vec[0] = ind_arg1_s+arg_map[3*set_size+n+offset_b]*1;
    arg1_vec[1] = ind_arg1_s+arg_map[4*set_size+n+offset_b]*1;
    arg1_vec[2] = ind_arg1_s+arg_map[5*set_size+n+offset_b]*1;

    // user-supplied kernel call


    NumericalFluxes(  arg0_vec,
                      arg1_vec,
                      arg6+(n+offset_b)*1,
                      arg7+(n+offset_b)*4,
                      arg8 );
  }

}


// host stub function

void op_par_loop_NumericalFluxes(char const *name, op_set set,
  op_arg arg0,
  op_arg arg3,
  op_arg arg6,
  op_arg arg7,
  op_arg arg8 ){

  float *arg8h = (float *)arg8.data;

  int    nargs   = 9;
  op_arg args[9];

  arg0.idx = 0;
  args[0] = arg0;
  for (int v = 1; v < 3; v++) {
    args[0 + v] = op_arg_dat(arg0.dat, v, arg0.map, 1, "float", OP_READ);
  }
  arg3.idx = 0;
  args[3] = arg3;
  for (int v = 1; v < 3; v++) {
    args[3 + v] = op_arg_dat(arg3.dat, v, arg3.map, 1, "float", OP_READ);
  }
  args[6] = arg6;
  args[7] = arg7;
  args[8] = arg8;

  int    ninds   = 2;
  int    inds[9] = {0,0,0,1,1,1,-1,-1,-1};

  if (OP_diags>2) {
    printf(" kernel routine with indirection: NumericalFluxes\n");
  }

  // get plan

  #ifdef OP_PART_SIZE_15
    int part_size = OP_PART_SIZE_15;
  #else
    int part_size = OP_part_size;
  #endif

  int set_size = op_mpi_halo_exchanges(set, nargs, args);

  // initialise timers

  double cpu_t1, cpu_t2, wall_t1, wall_t2;
  op_timers_core(&cpu_t1, &wall_t1);

  // set number of threads

#ifdef _OPENMP
  int nthreads = omp_get_max_threads( );
#else
  int nthreads = 1;
#endif

  // allocate and initialise arrays for global reduction

  float arg8_l[1+64*64];
  for (int thr=0; thr<nthreads; thr++)
    for (int d=0; d<1; d++) arg8_l[d+thr*64]=arg8h[d];

  if (set->size >0) {


    op_plan *Plan = op_plan_get(name,set,part_size,nargs,args,ninds,inds);
    // execute plan

    int block_offset = 0;

    for (int col=0; col < Plan->ncolors; col++) {
      if (col==Plan->ncolors_core) op_mpi_wait_all(nargs, args);

      int nblocks = Plan->ncolblk[col];

#pragma omp parallel for
      for (int blockIdx=0; blockIdx<nblocks; blockIdx++)
      op_x86_NumericalFluxes( blockIdx,
         (float *)arg0.data,
         (float *)arg3.data,
         Plan->ind_map,
         Plan->loc_map,
         (float *)arg6.data,
         (float *)arg7.data,
         &arg8_l[64*omp_get_thread_num()],
         Plan->ind_sizes,
         Plan->ind_offs,
         block_offset,
         Plan->blkmap,
         Plan->offset,
         Plan->nelems,
         Plan->nthrcol,
         Plan->thrcol,
         set_size);


  // combine reduction data
    if (col == Plan->ncolors_owned-1) {
      for (int thr=0; thr<nthreads; thr++)
        for(int d=0; d<1; d++) arg8h[d]  = MIN(arg8h[d],arg8_l[d+thr*64]);
    }

      block_offset += nblocks;
    }

  op_timing_realloc(15);
  OP_kernels[15].transfer  += Plan->transfer;
  OP_kernels[15].transfer2 += Plan->transfer2;

  }


  // combine reduction data

  op_mpi_reduce(&arg8,arg8h);

  op_mpi_set_dirtybit(nargs, args);

  // update kernel record

  op_timers_core(&cpu_t2, &wall_t2);
  op_timing_realloc(15);
  OP_kernels[15].name      = name;
  OP_kernels[15].count    += 1;
  OP_kernels[15].time     += wall_t2 - wall_t1;
}

